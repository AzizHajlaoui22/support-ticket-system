const nodemailer = require('nodemailer');

// Cr√©ation du transporteur SMTP
const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,  // üëà Utiliser host personnalis√©
    port: process.env.EMAIL_PORT,  // üëà Utiliser port personnalis√©
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

// Fonction g√©n√©rique pour envoyer un email
const sendEmail = async (to, subject, text) => {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to,
    subject,
    text
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Email envoy√© √† ${to}`);
  } catch (error) {
    console.error('‚ùå Erreur envoi email:', error);
  }
};

// Fonction sp√©cifique pour notifier du changement de statut
const sendTicketStatusUpdateEmail = async (userEmail, ticketId, newStatus) => {
  const subject = `Mise √† jour du ticket #${ticketId}`;
  const text = `Bonjour,\n\nVotre ticket num√©ro #${ticketId} a √©t√© mis √† jour.\n\nNouveau statut : ${newStatus}.\n\nMerci de votre confiance.`;
  
  await sendEmail(userEmail, subject, text);
};
// Fonction sp√©cifique pour notifier un agent qu'il a √©t√© assign√© √† un ticket
const sendTicketAssignedEmail = async (agentEmail, ticketId , senderName, senderRole) => {
  const subject = `Nouveau ticket assign√© #${ticketId}`;
  const text = `Bonjour,\n\nUn nouveau ticket vous a √©t√© assign√© par ${senderName} (${senderRole}).\nNum√©ro du ticket : ${ticketId}.\n\nMerci de traiter cette demande rapidement.`;
  
  await sendEmail(agentEmail, subject, text);
};

module.exports = { sendEmail, sendTicketStatusUpdateEmail , sendTicketAssignedEmail };
